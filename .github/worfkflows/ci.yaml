name: Test the application and push to DockerHub

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_URL: ${{ secrets.SONAR_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Repo
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

  frontend-test:
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        working-directory: ./frontend
    steps: 
      - name: Install dependencies and run tests
        run: |
          npm install
          npm run lint
          npm run test

      - name: SonarQube scan
        uses: sonarsource/sonarcloud-github-action@v5.0.0
        with: 
          projectBaseDir: ./frontend
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=src/
            -Dsonar.verbose=true

      - name: Scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        with:
          args: --sarif-file-output=snyk-frontend-test.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-frontend-test.sarif

  backend-test:
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        working-directory: ./backend
    steps: 
      - name: Install dependencies and run tests
        run: |
          npm install
          npm run lint
          npm run test

      - name: SonarQube scan
        uses: sonarsource/sonarcloud-github-action@v5.0.0
        with: 
          projectBaseDir: ./backend
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=src/
            -Dsonar.verbose=true

      - name: Scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        with:
          args: --sarif-file-output=snyk-backend-test.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-backend-test.sarif

  image-setup:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    permissions:
      contents: read
      security-events: write
      actions: read

    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS \
            --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ matrix.service }}
          docker build -t $IMAGE_URI:${{ matrix.service }}-latest ./${{ matrix.service }}
          docker push $IMAGE_URI:${{ matrix.service }}-latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ matrix.service }}:${{ matrix.service }}-latest
          format: "sarif"
          output: "trivy-results-${{ matrix.service }}.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results-${{ matrix.service }}.sarif

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ matrix.service }}:${{ matrix.service }}-latest
          args: --file=${{ matrix.service }}/Dockerfile --severity-threshold=high
          sarif: true

      - name: Rename SARIF file for matrix service
        run: mv snyk.sarif snyk-${{ matrix.service }}.sarif

      - name: Upload Snyk scan results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-${{ matrix.service }}.sarif

